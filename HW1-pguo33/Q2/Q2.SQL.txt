-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE movies
(
id int,
name text,
score int
); 
CREATE TABLE movie_cast 
(
movie_id int,
cast_id int,
cast_name text
);
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.separator ","
.import movie-name-score.txt movies
.import movie-cast.txt movie_cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX scores_index
ON movies (score);

CREATE INDEX cast_index
ON movie_cast (cast_id);

CREATE INDEX movie_index
ON movies (id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM movies) as prop
FROM movies
WHERE score > 50;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]
SELECT id, name, score FROM (SELECT * from movies order by score desc limit 7) order by score desc, name asc;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_id, cast_name, COUNT(*) as movie_count
FROM  movie_cast
GROUP BY cast_name
ORDER BY COUNT(*) desc, cast_name asc limit 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_id, cast_name, AVG(score) as average_score
FROM movies, movie_cast
WHERE movies.id = movie_cast.movie_id AND score >= 50
GROUP BY cast_name
HAVING COUNT(*) > 2
ORDER BY average_score desc, cast_name asc LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]
CREATE VIEW good_collaboration AS
SELECT m.cast_id as cast_member_id1, n.cast_id as cast_member_id2,
COUNT(*) as movie_count, AVG(movies.score) as average_movie_score
FROM movie_cast m, movie_cast n JOIN movies
ON m.movie_id = movies.id
WHERE m.movie_id = n.movie_id AND m.cast_id < n.cast_id
GROUP BY cast_member_id1, cast_member_id2
HAVING movie_count >= 3 AND average_movie_score >= 40;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]
SELECT movie_cast.cast_id, cast_name, AVG(average_movie_score) AS collaboration_score
FROM (SELECT cast_member_id1 as cast_id, movie_count, average_movie_score
FROM good_collaboration
UNION
SELECT cast_member_id2 as cast_id, movie_count, average_movie_score
FROM good_collaboration) collaboration
JOIN movie_cast ON collaboration.cast_id = movie_cast.cast_id
GROUP BY movie_cast.cast_id
ORDER BY collaboration_score desc, cast_name asc LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE movie_overview USING fts3(
id int,
name text,
year int,
overview text,
popularity decimal);

.separator ","
.import movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]
SELECT COUNT(overview) as count_overview
FROM movie_overview
WHERE overview MATCH 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]
SELECT id
FROM movie_overview
WHERE overview MATCH 'love NEAR/5 story';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --